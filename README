unfolding_app_template and UC San Diego/Coursera MOOC starter code
==================================================================

This is a skeleton to use Unfolding in Eclipse as well as some starter
code for the Object Oriented Programming in Java course offered by 
UC San Diego through Coursera.

A very basic Unfolding demo you'll find in the source folder in the default package. 
For more examples visit http://unfoldingmaps.org, or download the template with
examples.


The module folders contain the starter code for the programming assignments
associated with the MOOC.

Get excited and make things!


INSTALLATION

Import this folder in Eclipse ('File' -> 'Import' -> 'Existing Projects into
Workspace', Select this folder, 'Finish')


MANUAL INSTALLATION

If the import does not work follow the steps below.

- Create new Java project
- Copy+Paste all files into project
- Add all lib/*.jars to build path
- Set native library location for jogl.jar.
 Choose appropriate folder for your OS.
- Add data/ as src


TROUBLE SHOOTING

Switch Java Compiler to 1.6 if you get VM problems.
 (Processing should work with Java 1.6, and 1.7)






Have you ever wondered how map overlays for Google Maps are created? In the project for this course you will build your own interactive visualization of a large dataset tagged by geospatial information. Both powerful and challenging, data visualization is one of the hot topics of modern computer science - as well as something that influences our world every day!

To create this project, you’ll be working with a package called Unfolding Maps, which is a library for interactive maps and geovisualizations. It was developed by Till Nagel and the team at the University of Applied Sciences Potsdam along with other contributors and we are grateful that they developed such a cool package that we (and you) can build on for this course.

The project is separated into several parts, and you will be able to achieve project milestones as you work through the modules in the course. 

Throughout the project, we’ve suggested extensions and ideas for adding extra features to your project. 
Have fun with it and make it your own. At the end of the course, you’ll have the opportunity to showcase your creation and see what your peers have built too.


================================================================================================================================

Learning outcomes:


week1:

Build an interactive graphical program in Java
Design classes to make use of object-oriented programming paradigms
Explain inheritance and polymorphism and how each concept is applied in the creation of a Java GUI
Explain how event handling works in Java, and write event handlers to create an interactive program
Write and apply searching and sorting algorithms to manage large data sets
Find and fix errors (bugs) in code
Develop and use test cases to ensure correctness of a program


===================================================================

week2:

Select and effectively use Java documentation
Generate visual maps using Java code and the Unfolding Maps libraries
Create and draw memory models for reasoning about variable values for primitive and object data types
Apply the basic rules for variable scope and explain how it impacts your code
Practice tracing code using memory models and Java's rules for variable scope


==============================================================
week3 :

Create and manipulate Graphical User Interfaces (GUIs)
Find and effectively use Java documentation
Use the Processing library in your programs
Customize visual maps using Java code
Use Java to read and parse data files
Organize data into appropriate objects
Describe and use the List data type and the ArrayList class
Describe and use the Map data type

=============================================================

week4:

Explain the value of inheritance as a feature in object oriented programming languages
Use the keyword extends
Explain the relationship between a superclass and a subclass
Use UML Diagrams to display class hierarchies
Explain an “is-a” relationship between classes
Describe how Java object construction occurs from the inside out
Use same-class and superclass constructors in class creation
Create methods which override from a superclass
Contrast method overloading and method overriding
Explain the purpose of polymorphism
Step through decisions made at compile time and runtime
Use casting of objects to aid the compiler
Use the keyword "abstract"
Compare and contrast “inheritance of implementation” and “inheritance of interface”
Decide between Abstract Classes and Interfaces

=========================================================================

week5:

Distinguish between procedural programming and event-driven programming.
Trace event-driven code
Explain how mouse-clicks and keyboard input interact with the program execution
Design user-interface elements
Write code to implement a button and respond to mouse events
Describe inheritance relationships used in the course so far
Distinguish between interfaces and classes in this hierarchy  


===================================================================================
week6:

Motivate the importance of search
Write code to perform a linear search
Explain and implement the binary search algorithm
Explain why binary search is better than linear search
Define sorting
Explain why sorting data can be useful
Explain and implement the selection sort algorithm
Trace code and describe its high-level function
Describe alternate algorithms for sorting
Use pre-defined Java methods to sort
Explain the properties of this built-in sort algorithm
Define and use the Comparable interface in Java

